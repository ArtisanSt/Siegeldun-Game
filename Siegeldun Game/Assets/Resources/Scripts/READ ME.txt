Script Directory
:: All Base are ABSTRACT
:: ** means features
:: = Accessible Interfaces
:: + Folder


Game System
- Levels (Level System Overrites)
	- 

- GameSystem.cs (Overall Game System) {Parent Object} [Game runtime]
- LevelSystem.cs (Level Base System) {Parent Object} [Scene runtime]
- Globals.cs (Global Static Properties) {SingletonDontDestroy}
- SettingsSystem.cs (Base Monobehaviour) {Singleton}

+ Settings
	- ControllerSystem.cs (Monobehaviour)
		** Player Checker : Locates the entity instance controlled by player, if none create one
		



Singleton
- Singleton.cs (Monobehaviour) [Limits an object to have only 1 instance]
	= ISingleton
- SingletonDontDestroy.cs (Monobehaviour) [Limits an object to have only 1 instance but stays for entire game runtime]
	= ISingleton



Root
- Root.cs (Base Monibehaviour) {SO : RootProp.cs} [Game System Communicator]
	** Component Checker : Loads each Component (Unity-based and User-Based)

- Animation System (Monobehaviour)
	= IAnimateable

+ Entity
	+ Unit
		- Unit.cs (Monobehaviour) {SO : UnitProp.cs} 
		
		+ Humans {Mb: Human.cs} {SO : HumanProp.cs} [Jason, Raf]
		+ Goblins {Mb: Goblin.cs} {SO : GoblinProp.cs} [Goblin Runner, Wolf, Goblin Sniper, Goblin Rider, Gobla]
		+ Crimsons {Mb: Crimson.cs} {SO : CrimsonProp.cs} [Kop'ra(Corruption), , ]
		+ Phantoms {Mb: Phantom.cs} {SO : PhantomProp.cs} 
		+ Elementals {Mb: Elemental.cs} {SO : ElementalProp.cs} 
		+ Aliens {Mb: Alien.cs} {SO : AlienProp.cs} 

		- Jason.cs (Character Override)
	+ Structure
		- Structure.cs (Monobehaviour) {SO : StructureProp.cs} 

		- Gate.cs (Structure Override)
	+ Item
		- Item.cs (Monobehaviour) {SO : ItemProp.cs}
		
		+ Weapons
		+ Potions
		+ Keys
		+ Others

		- Stick.cs (Item Override)
	+ Other
		- 

	- Interactible.cs (Monobehaviour) [Allows interactions for each instance]
		= IInteratible
	- Entity.cs (Base Monobehaviour) {SO : EntityProp.cs} [Entity System Communicator]
		** Component Checker (Override) : Loads Entity System Components
		** Stats Tab : Gets each showable stats from each System
		** Entity Type: Identify what type of Entity is the object
	- Controller.cs (Monobehaviour)
		** Control Verifier : Verifies if an instance is controlled by the player


	// User-based Varied Components
	- MovementSystem (Monobehaviour) {SO : MovementSystemProp.cs} [MVSpd] {Cte: Animation}
		= IMoveable (Sends signal to move)
	- StatusSystem (Monobehaviour) {SO : StatusSystemProp.cs} [HP, SP, Shield, Armor]  {Cte: Animation}
		= IStatusable (Interact with HP, SP, Shield, Armor)
	- BattleSystem (Monobehaviour) {SO : BattleSystemProp.cs} {Reqs: StatusSystem} [AtkDmg, AtkSpd, AtkChrg]
		= IDamageable (Makes an object prone to damage)
		

	
- 



========================================== Imported Scripts ========================================== 
Astar Pathfinding